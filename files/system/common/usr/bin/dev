#!/bin/bash

set -euo pipefail   # strict error handling
IFS=$'\n\t'         # safe IFS

DEV_INSTALL_SCRIPT="$HOME/.dev-install.sh"
CONTAINER_NAME="dev-snry"
IMAGE="fedora:latest"
INIT_MARKER="$HOME/.distrobox_initialized"

log() {
  echo "[INFO] $1"
}

# make sure distrobox is installed
if ! command -v distrobox &> /dev/null; then
  echo "[ERROR] distrobox is not installed. Aborting."
  exit 1
fi

# first-time initialization
if [[ ! -f "$INIT_MARKER" ]]; then
  log "Container '$CONTAINER_NAME' not initialized. Doing it nowâ€¦"

  log "Writing development install script to $DEV_INSTALL_SCRIPT"
  cat <<'EOT' > "$DEV_INSTALL_SCRIPT"
#!/bin/bash
set -euo pipefail

# enable COPR repos
sudo dnf copr enable -y atim/starship \
  || echo "COPR atim/starship already enabled"
sudo dnf copr enable -y agriffis/neovim-nightly \
  || echo "COPR agriffis/neovim-nightly already enabled"
sudo dnf config-manager \
  --add-repo https://cli.github.com/packages/rpm/gh-cli.repo \
  || echo "gh-cli already enabled"

# install packages
sudo dnf install -y \
  gh \
  git \
  zsh \
  zsh-autosuggestions \
  zsh-syntax-highlighting \
  starship \
  neovim \
  golang

# install gopls
go install golang.org/x/tools/gopls@latest
EOT

  chmod +x "$DEV_INSTALL_SCRIPT"

  # create the container if it doesn't exist
  if ! distrobox list | grep -q "^$CONTAINER_NAME\$"; then
    log "Creating distrobox '$CONTAINER_NAME' from image $IMAGE"
    distrobox create --name "$CONTAINER_NAME" --image "$IMAGE"
  else
    log "Container '$CONTAINER_NAME' already exists"
  fi

  # run the install script inside the container
  log "Running install script inside '$CONTAINER_NAME'"
  distrobox enter --name "$CONTAINER_NAME" -- bash \
    "$DEV_INSTALL_SCRIPT"

  # cleanup
  log "Removing temporary install script"
  rm -f "$DEV_INSTALL_SCRIPT"

  log "Marking initialization complete"
  touch "$INIT_MARKER"

  log "'$CONTAINER_NAME' initialized successfully."
fi

# finally, drop you into the container shell
distrobox enter --name "$CONTAINER_NAME"